@model TaiKhoanModel
@using Nop.Web.Models.NhaXes
@using Nop.Core.Infrastructure
@using Nop.Web.Framework.Events
@using Nop.Services.Events
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<div id="customer-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.CustomerRoles")
        </li>
        <li @Html.RenderSelectedTabIndex(2, GetSelectedTabIndex())>
            Quản lý các văn phòng
        </li>
        @if (Model.Id > 0)
        {
           
            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.ActivityLog")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabCustomerRoles()
    </div>
    <div>
        @TabNhanVienVanPhongs()
    </div>
    @if (Model.Id > 0)
    {
     
        <div>
            @TabActivityLog()
        </div>
    }
</div>
<script>
    $(document).ready(function() {
        $("#customer-edit").kendoTabStrip({
            animation:  {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });

    });
</script>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "customer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{

    <table class="adminContent customer-info-tab">
        @if (Model.UsernamesEnabled)
        {
            if (Model.Id == 0 || Model.AllowUsersToChangeUsernames)
            {
                <tr>
                    <td class="adminTitle">
                        @Html.NopLabelFor(model => model.Username):
                    </td>
                    <td class="adminData">
                        @Html.EditorFor(model => model.Username)
                        @Html.ValidationMessageFor(model => model.Username)
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td class="adminTitle">
                        @Html.NopLabelFor(model => model.Username):
                    </td>
                    <td class="adminData">
                        @Model.Username
                        @Html.HiddenFor(model => model.Username)
                    </td>
                </tr>
            }
        }
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Email):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Password):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Password, new { autocomplete = "off", @class = "text-box single-line" })
                @Html.ValidationMessageFor(model => model.Password)
                @if (Model.Id > 0)
                {
                    <input type="submit" name="changepassword" class="k-button" value="@T("Admin.Customers.Customers.Fields.Password.Change")" />
                }
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.FirstName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LastName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </td>
        </tr>
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.DateOfBirth):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.DateOfBirth)
                    @Html.ValidationMessageFor(model => model.DateOfBirth)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Active):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </td>
        </tr>
    </table>
}
@helper TabCustomerRoles()
{

    if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
    {
        foreach (var customerRole in Model.AvailableCustomerRoles)
        {
            <div>
                <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
            </div>
        }
    }
    else
    {
        @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
    }
}
@helper TabNhanVienVanPhongs()
{

    if (Model.AvailableNhanVienVanPhongs != null && Model.AvailableNhanVienVanPhongs.Count > 0)
    {
        foreach (var vp in Model.AvailableNhanVienVanPhongs)
        {
            <div>
                <input type="checkbox" name="SelectedNhanVienVanPhongIds" value="@vp.Id" checked="@(Model.SelectedNhanVienVanPhongIds != null && Model.SelectedNhanVienVanPhongIds.Contains(vp.Id))" />@vp.TenVanPhong
            </div>
        }
    }
    else
    {
        <p>Không có thông tin văn phòng</p>
    }
}
@helper TabActivityLog()
{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    <table class="adminContent">
        <tr>
            <td>
                <div id="activitylog-grid"></div>

                <script>
                    $(document).ready(function () {
                        $("#activitylog-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ListActivityLog", "NhaXes", new { customerId = Model.Id }))",
                                        type: "POST",
                                        dataType: "json"
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [{
                                field: "ActivityLogTypeName",
                                title: "@T("Admin.Customers.Customers.ActivityLog.ActivityLogType")",
                                width: 300,
                            }, {
                                field: "Comment",
                                title: "@T("Admin.Customers.Customers.ActivityLog.Comment")"
                            }, {
                                field: "CreatedOn",
                                title: "@T("Admin.Customers.Customers.ActivityLog.CreatedOn")",
                                width: 200,
                                type: "date",
                                format: "{0:G}"
                            }]
                        });
                    });
                </script>
            </td>
        </tr>
    </table>
}
